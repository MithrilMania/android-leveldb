import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.library'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.2"

    defaultConfig {
        minSdkVersion 16
        targetSdkVersion 23
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        opensource {}
    }

    sourceSets.main {
        jniLibs.srcDirs = ['src/main/libs']
        jni.srcDirs = []//use "Build > Make project" in Android Studio to make jni libs manually
    }

}

def getNdkDir() {
    if (System.env.ANDROID_NDK_ROOT != null)
        return System.env.ANDROID_NDK_ROOT

    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    def ndkdir = properties.getProperty('ndk.dir', null)
    if (ndkdir == null)
        throw new GradleException("NDK location not found. Define location with ndk.dir in the local.properties file or with an ANDROID_NDK_ROOT environment variable.")

    return ndkdir
}

task ndkBuild(type: Exec) {

    String ndkBuild = getNdkDir() + File.separator + 'ndk-build'

    // Arch linux FTW, however, I think this works for Windows users???
    if (Os.isFamily(Os.FAMILY_WINDOWS)) ndkBuild += ".cmd"

    commandLine ndkBuild, '-C', 'src/main'
}

tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn ndkBuild
}

dependencies {
    compile fileTree(include: ['*.jar', '*.so'], dir: 'libs')
    testCompile 'junit:junit:4.12'
}